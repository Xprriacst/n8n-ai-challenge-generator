{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ui-defis-final",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "0857529a-6481-46fa-8e92-53a13c15fb77",
      "name": "Webhook Reception",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [0, -176],
      "webhookId": "ui-defis-final"
    },
    {
      "parameters": {
        "jsCode": "// Parse les données du formulaire HTML\nconst body = $input.first().json.body;\nlet problematique, nombreDefis;\n\n// Si les données arrivent en x-www-form-urlencoded\nif (typeof body === 'string') {\n  const params = new URLSearchParams(body);\n  problematique = params.get('Je veux...') || '';\n  nombreDefis = parseInt(params.get('Combien de défi à tu relevé') || '0');\n} else {\n  // Si les données arrivent en JSON\n  problematique = body['Je veux...'] || body.problematique || '';\n  nombreDefis = parseInt(body['Combien de défi à tu relevé'] || body.nombreDefis || '0');\n}\n\n// Détection automatique du niveau basé sur le nombre de défis déjà relevés\nlet niveau;\nif (nombreDefis === 0) {\n  niveau = 'débutant';\n} else if (nombreDefis <= 5) {\n  niveau = 'intermédiaire';\n} else {\n  niveau = 'avancé';\n}\n\nreturn {\n  problematique: problematique.trim(),\n  nombreDefis,\n  niveau,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "5ae513f6-0775-4f1c-82c2-3c5b3da45725",
      "name": "Parse Input Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [224, -176]
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1v-okeX7THIpoKCIV_nJyEPpSku0ehjlLsCjD1AYhyiQ"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0"
        },
        "range": "A1",
        "options": {}
      },
      "id": "get-prompt-from-sheets",
      "name": "Get Prompt from Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [224, -50],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-oauth",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Créer le champ chatInput requis par l'AI Agent\nconst sheetsData = $('Get Prompt from Sheets').first().json;\nconst inputData = $('Parse Input Data').first().json;\n\n// Accéder au prompt depuis le format complexe de Google Sheets\nlet promptFromSheets;\nif (sheetsData && typeof sheetsData === 'object') {\n  // Le prompt est dans la première propriété qui n'est pas 'row_number'\n  const keys = Object.keys(sheetsData);\n  const promptKey = keys.find(key => key !== 'row_number');\n  promptFromSheets = sheetsData[promptKey];\n} else {\n  promptFromSheets = 'Prompt par défaut non trouvé';\n}\n\n// Remplacer les variables dans le prompt\nlet finalPrompt = promptFromSheets\n  .replace(/\\{\\{ \\$\\('Parse Input Data'\\)\\.first\\(\\)\\.json\\.problematique \\}\\}/g, inputData.problematique)\n  .replace(/\\{\\{ \\$\\('Parse Input Data'\\)\\.first\\(\\)\\.json\\.nombreDefis \\}\\}/g, inputData.nombreDefis)\n  .replace(/\\{\\{ \\$\\('Parse Input Data'\\)\\.first\\(\\)\\.json\\.niveau \\}\\}/g, inputData.niveau);\n\nreturn {\n  chatInput: finalPrompt\n};"
      },
      "id": "create-chat-input",
      "name": "Create Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [448, -50]
    },
    {
      "parameters": {
        "promptType": "auto",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [672, -50],
      "id": "836a6a81-1e8c-48e0-9fd6-97e4726e3037",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4-1106-preview"
        },
        "options": {
          "temperature": 0.8,
          "maxTokens": 2000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [400, 80],
      "id": "0f77808c-f72c-4300-94d7-88b30adf1b71",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "cfCVOI8aC8r1CaGM",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Nettoie et valide la réponse de l'IA\nconst response = $input.first().json.output;\n\ntry {\n  let cleanResponse = response;\n  \n  // Nettoyer la réponse si elle contient des blocs markdown\n  if (typeof response === 'string') {\n    // Supprimer les blocs markdown ```json et ```\n    cleanResponse = response\n      .replace(/```json\\s*/g, '')\n      .replace(/```\\s*/g, '')\n      .trim();\n  }\n  \n  let data;\n  \n  // Tenter de parser directement si c'est déjà un objet\n  if (typeof cleanResponse === 'object') {\n    data = cleanResponse;\n  } else {\n    // Sinon parser en tant que JSON string\n    data = JSON.parse(cleanResponse);\n  }\n  \n  // Validation : vérifier qu'on a bien 15 défis\n  if (!data.defis || !Array.isArray(data.defis) || data.defis.length !== 15) {\n    throw new Error(`Nombre de défis incorrect: ${data.defis?.length || 0} au lieu de 15`);\n  }\n  \n  // Validation de la structure de chaque défi\n  data.defis.forEach((defi, index) => {\n    if (!defi.numero || !defi.nom || !defi.mission || !defi.pourquoi) {\n      throw new Error(`Défi ${index + 1} incomplet - manque: ${!defi.numero ? 'numero ' : ''}${!defi.nom ? 'nom ' : ''}${!defi.mission ? 'mission ' : ''}${!defi.pourquoi ? 'pourquoi' : ''}`);\n    }\n    // S'assurer que duree_estimee existe\n    if (!defi.duree_estimee) {\n      defi.duree_estimee = \"15\";\n    }\n  });\n  \n  return data;\n  \n} catch (error) {\n  // En cas d'erreur, retourner un exemple par défaut avec 15 défis complets\n  console.error('Erreur parsing IA:', error.message);\n  \n  const inputData = $('Parse Input Data').first().json;\n  \n  return {\n    problematique: inputData.problematique,\n    niveau_detecte: inputData.niveau,\n    erreur: error.message,\n    defis: [\n      {\n        \"numero\": 1,\n        \"nom\": \"Auto-observation quotidienne\",\n        \"mission\": \"Notez 3 situations où vous manquez de confiance cette semaine\",\n        \"pourquoi\": \"Identifier les patterns aide à mieux comprendre les déclencheurs\",\n        \"bonus\": null,\n        \"duree_estimee\": \"10\"\n      },\n      {\n        \"numero\": 2,\n        \"nom\": \"Inventaire des victoires\",\n        \"mission\": \"Listez 5 réussites personnelles des 2 dernières années\",\n        \"pourquoi\": \"Se rappeler ses succès renforce l'estime de soi\",\n        \"bonus\": \"Demandez à un proche ses 3 qualités préférées chez vous\",\n        \"duree_estimee\": \"15\"\n      },\n      {\n        \"numero\": 3,\n        \"nom\": \"Posture de pouvoir\",\n        \"mission\": \"Adoptez une posture droite et souriez pendant 2 minutes\",\n        \"pourquoi\": \"La posture influence directement l'état d'esprit et la confiance\",\n        \"bonus\": \"Faites cet exercice avant une situation stressante\",\n        \"duree_estimee\": \"5\"\n      },\n      {\n        \"numero\": 4,\n        \"nom\": \"Affirmations positives\",\n        \"mission\": \"Répétez 3 affirmations positives sur vous-même chaque matin\",\n        \"pourquoi\": \"La répétition d'affirmations reprogramme l'esprit subconscient\",\n        \"bonus\": null,\n        \"duree_estimee\": \"8\"\n      },\n      {\n        \"numero\": 5,\n        \"nom\": \"Zone de confort expansion\",\n        \"mission\": \"Faites une chose qui vous intimide légèrement aujourd'hui\",\n        \"pourquoi\": \"Sortir de sa zone de confort renforce progressivement la confiance\",\n        \"bonus\": \"Documentez vos sensations avant et après\",\n        \"duree_estimee\": \"20\"\n      },\n      {\n        \"numero\": 6,\n        \"nom\": \"Compliment à soi-même\",\n        \"mission\": \"Identifiez 3 choses que vous avez bien faites aujourd'hui\",\n        \"pourquoi\": \"Reconnaître ses propres efforts développe l'auto-bienveillance\",\n        \"bonus\": null,\n        \"duree_estimee\": \"10\"\n      },\n      {\n        \"numero\": 7,\n        \"nom\": \"Contact visuel miroir\",\n        \"mission\": \"Regardez-vous dans les yeux dans le miroir pendant 1 minute\",\n        \"pourquoi\": \"Le contact visuel avec soi-même renforce l'acceptation de soi\",\n        \"bonus\": \"Souriez et dites-vous quelque chose de positif\",\n        \"duree_estimee\": \"5\"\n      },\n      {\n        \"numero\": 8,\n        \"nom\": \"Conversation courageuse\",\n        \"mission\": \"Exprimez une opinion personnelle dans une conversation\",\n        \"pourquoi\": \"Exprimer ses idées renforce l'affirmation de soi\",\n        \"bonus\": null,\n        \"duree_estimee\": \"15\"\n      },\n      {\n        \"numero\": 9,\n        \"nom\": \"Célébration des petites victoires\",\n        \"mission\": \"Célébrez consciemment 3 petits accomplissements aujourd'hui\",\n        \"pourquoi\": \"Célébrer renforce les circuits neuronaux de la réussite\",\n        \"bonus\": \"Partagez une victoire avec quelqu'un\",\n        \"duree_estimee\": \"12\"\n      },\n      {\n        \"numero\": 10,\n        \"nom\": \"Respiration de confiance\",\n        \"mission\": \"Pratiquez 5 minutes de respiration profonde avant un défi\",\n        \"pourquoi\": \"La respiration calme le système nerveux et améliore la performance\",\n        \"bonus\": null,\n        \"duree_estimee\": \"8\"\n      },\n      {\n        \"numero\": 11,\n        \"nom\": \"Journal des forces\",\n        \"mission\": \"Écrivez sur vos 3 plus grandes forces et comment les utiliser\",\n        \"pourquoi\": \"Identifier ses forces permet de s'appuyer dessus dans les défis\",\n        \"bonus\": \"Demandez à 2 personnes quelles sont vos forces selon eux\",\n        \"duree_estimee\": \"18\"\n      },\n      {\n        \"numero\": 12,\n        \"nom\": \"Défi social\",\n        \"mission\": \"Initiez une conversation avec un inconnu\",\n        \"pourquoi\": \"Les interactions sociales développent la confiance interpersonnelle\",\n        \"bonus\": null,\n        \"duree_estimee\": \"25\"\n      },\n      {\n        \"numero\": 13,\n        \"nom\": \"Visualisation de réussite\",\n        \"mission\": \"Visualisez-vous réussissant un défi important pendant 10 minutes\",\n        \"pourquoi\": \"La visualisation prépare mentalement au succès\",\n        \"bonus\": \"Ajoutez des détails sensoriels à votre visualisation\",\n        \"duree_estimee\": \"15\"\n      },\n      {\n        \"numero\": 14,\n        \"nom\": \"Feedback constructif\",\n        \"mission\": \"Demandez un retour constructif à quelqu'un de confiance\",\n        \"pourquoi\": \"Le feedback externe aide à mieux se connaître et progresser\",\n        \"bonus\": null,\n        \"duree_estimee\": \"20\"\n      },\n      {\n        \"numero\": 15,\n        \"nom\": \"Plan d'action confiance\",\n        \"mission\": \"Créez un plan de 3 actions concrètes pour renforcer votre confiance\",\n        \"pourquoi\": \"Un plan d'action transforme l'intention en résultats mesurables\",\n        \"bonus\": \"Partagez votre plan avec un proche pour l'engagement\",\n        \"duree_estimee\": \"30\"\n      }\n    ]\n  };\n}"
      },
      "id": "7222901b-bd54-497b-9fb9-c32c341162ed",
      "name": "Validation & Nettoyage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [672, -176]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.erreur }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dd3f3719-ece1-4476-a649-88fa44591ec9",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [912, -64]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, GET, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "113e4802-caf7-4e9d-8733-5a05d0cc3bc9",
      "name": "Response Final",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [992, -208]
    }
  ],
  "connections": {
    "Webhook Reception": {
      "main": [
        [
          {
            "node": "Parse Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Input Data": {
      "main": [
        [
          {
            "node": "Get Prompt from Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Prompt from Sheets": {
      "main": [
        [
          {
            "node": "Create Chat Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Chat Input": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Validation & Nettoyage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation & Nettoyage": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Response Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": false
  }
}
