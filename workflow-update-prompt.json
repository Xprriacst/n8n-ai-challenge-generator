{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-prompt",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-update-prompt",
      "name": "Webhook Update Prompt",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [0, 0],
      "webhookId": "update-prompt"
    },
    {
      "parameters": {
        "jsCode": "// Parse le nouveau prompt reçu\nconst body = $input.first().json.body;\nlet promptData;\n\ntry {\n  // Parser le JSON reçu\n  promptData = typeof body === 'string' ? JSON.parse(body) : body;\n  \n  if (!promptData.prompt) {\n    throw new Error('Prompt manquant dans la requête');\n  }\n  \n  return {\n    newPrompt: promptData.prompt,\n    timestamp: promptData.timestamp || new Date().toISOString(),\n    success: true\n  };\n  \n} catch (error) {\n  return {\n    error: error.message,\n    success: false\n  };\n}"
      },
      "id": "parse-prompt-data",
      "name": "Parse Prompt Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 0]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-parse-success",
      "name": "Check Parse Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [400, 0]
    },
    {
      "parameters": {
        "url": "={{ $env.N8N_HOST }}/api/v1/workflows/{{ $env.MAIN_WORKFLOW_ID }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": false,
        "sendBody": true,
        "contentType": "json",
        "body": "={{ JSON.stringify({\n  \"name\": \"Workflow Défis IA Updated\",\n  \"nodes\": $('Get Current Workflow').first().json.nodes.map(node => {\n    if (node.name === 'AI Agent') {\n      return {\n        ...node,\n        parameters: {\n          ...node.parameters,\n          text: $json.newPrompt\n        }\n      };\n    }\n    return node;\n  }),\n  \"connections\": $('Get Current Workflow').first().json.connections,\n  \"active\": true\n}) }}",
        "options": {}
      },
      "id": "update-workflow",
      "name": "Update Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, -100],
      "credentials": {
        "httpHeaderAuth": {
          "id": "n8n-api-token",
          "name": "N8N API Token"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $env.N8N_HOST }}/api/v1/workflows/{{ $env.MAIN_WORKFLOW_ID }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": false,
        "sendBody": false,
        "options": {}
      },
      "id": "get-current-workflow",
      "name": "Get Current Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [600, -100],
      "credentials": {
        "httpHeaderAuth": {
          "id": "n8n-api-token",
          "name": "N8N API Token"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Prompt mis à jour avec succès\",\n  \"timestamp\": $json.timestamp || new Date().toISOString()\n} }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1000, -100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": $json.error || \"Erreur lors du parsing\",\n  \"timestamp\": new Date().toISOString()\n} }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [600, 100]
    }
  ],
  "connections": {
    "Webhook Update Prompt": {
      "main": [
        [
          {
            "node": "Parse Prompt Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Prompt Data": {
      "main": [
        [
          {
            "node": "Check Parse Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Parse Success": {
      "main": [
        [
          {
            "node": "Get Current Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Workflow": {
      "main": [
        [
          {
            "node": "Update Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Workflow": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": false
  }
}
